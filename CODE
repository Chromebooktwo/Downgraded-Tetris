<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>Tetris</title>
 <style>
 body {
 display: flex;
 flex-direction: column;
 align-items: center;
 justify-content: center;
 height: 100vh;
 margin: 0;
 background-color: #000;
 font-family: Arial, sans-serif;
 color: #fff;
 }

 canvas {
 border: 1px solid #fff;
 }

 #game-container {
 position: relative;
 }

 #score-container {
 display: flex;
 justify-content: space-between;
 width: 200px;
 margin-bottom: 10px;
 }

 #start-screen, #game-over-screen {
 position: absolute;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 display: flex;
 flex-direction: column;
 align-items: center;
 justify-content: center;
 background-color: rgba(0, 0, 0, 0.8);
 }

 button {
 margin-top: 20px;
 padding: 10px 20px;
 font-size: 16px;
 cursor: pointer;
 }
 </style>
</head>
<body>
 <div id="score-container">
 <div>Score: <span id="score">0</span></div>
 <div>High Score: <span id="high-score">0</span></div>
 </div>
 <div id="game-container">
 <canvas id="tetris" width="200" height="400"></canvas>
 <div id="start-screen">
 <h2>Tetris</h2>
 <button id="start-button">Start Game</button>
 </div>
 <div id="game-over-screen" style="display: none;">
 <h2>Game Over</h2>
 <p>Score: <span id="final-score"></span></p>
 <button id="restart-button">Play Again</button>
 </div>
 </div>
 <script>
 const canvas = document.getElementById("tetris");
 const context = canvas.getContext("2d");
 const scoreElement = document.getElementById("score");
 const highScoreElement = document.getElementById("high-score");
 const startScreen = document.getElementById("start-screen");
 const gameOverScreen = document.getElementById("game-over-screen");
 const startButton = document.getElementById("start-button");
 const restartButton = document.getElementById("restart-button");
 const finalScoreElement = document.getElementById("final-score");

 const ROWS = 20;
 const COLUMNS = 10;
 const BLOCK_SIZE = 20;
 const FRAME_RATE = 500; // Milliseconds per frame (adjust as needed)

 const tetrominos = [
 [],
 [[1, 1, 1, 1]], // I
 [[1, 1], [1, 1]], // O
 [[1, 1, 1], [0, 1, 0]], // T
 [[1, 1, 1], [1, 0, 0]], // L
 [[1, 1, 1], [0, 0, 1]], // J
 [[1, 1, 0], [0, 1, 1]], // S
 [[0, 1, 1], [1, 1, 0]], // Z
 ];

 const colors = ["#000", "#00F", "#0F0", "#F00", "#FF0", "#F0F", "#0FF", "#888"];

 let board = Array.from({ length: ROWS }, () => Array(COLUMNS).fill(0));
 let currentTetromino;
 let currentX;
 let currentY;
 let score = 0;
 let highScore = 0;
 let gameInterval;
 let isGameOver = false;

 function draw() {
 context.clearRect(0, 0, canvas.width, canvas.height);
 drawBoard();
 drawTetromino();
 }

 function drawBlock(x, y, color) {
 context.fillStyle = color;
 context.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
 context.strokeStyle = "#fff";
 context.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
 }

 function drawBoard() {
 board.forEach((row, y) => {
 row.forEach((value, x) => {
 if (value !== 0) {
 drawBlock(x, y, colors[value]);
 }
 });
 });
 }

 function drawTetromino() {
 currentTetromino.forEach((row, y) => {
 row.forEach((value, x) => {
 if (value !== 0) {
 drawBlock(currentX + x, currentY + y, colors[value]);
 }
 });
 });
 }

 function collision(x, y, piece) {
 for (let row = 0; row < piece.length; row++) {
 for (let col = 0; col < piece[row].length; col++) {
 if (piece[row][col] && (board[y + row] === undefined || board[y + row][x + col] !== 0)) {
 return true;
 }
 }
 }
 return false;
 }

 function rotateTetromino() {
 const nextTetromino = currentTetromino[0].map((_, i) =>
 currentTetromino.map(row => row[i]).reverse()
 );
 if (!collision(currentX, currentY, nextTetromino)) {
 currentTetromino = nextTetromino;
 }
 }

 function moveLeft() {
 if (!collision(currentX - 1, currentY, currentTetromino)) {
 currentX--;
 }
 }

 function moveRight() {
 if (!collision(currentX + 1, currentY, currentTetromino)) {
 currentX++;
 }
 }

 function moveDown() {
 if (!collision(currentX, currentY + 1, currentTetromino)) {
 currentY++;
 } else {
 lockTetromino();
 }
 }

 function lockTetromino() {
 currentTetromino.forEach((row, y) => {
 row.forEach((value, x) => {
 if (value) {
 board[currentY + y][currentX + x] = colors.indexOf(value);
 }
 });
 });

 clearRows();
 spawnTetromino();
 }

 function clearRows() {
 let rowsCleared = 0;
 for (let y = ROWS - 1; y >= 0; y--) {
 if (board[y].every(block => block !== 0)) {
 board.splice(y, 1);
 board.unshift(Array(COLUMNS).fill(0));
 rowsCleared++;
 }
 }
 updateScore(rowsCleared);
 }

 function updateScore(rowsCleared) {
 const points = [0, 40, 100, 300, 1200];
 score += points[rowsCleared];
 scoreElement.textContent = score;
 if (score > highScore) {
 highScore = score;
 highScoreElement.textContent = highScore;
 }
 }

 function spawnTetromino() {
 currentTetromino = tetrominos[Math.floor(Math.random() * (tetrominos.length - 1)) + 1];
 currentX = Math.floor((COLUMNS - currentTetromino[0].length) / 2);
 currentY = 0;

 if (collision(currentX, currentY, currentTetromino)) {
 gameOver();
 }
 }

 function gameOver() {
 isGameOver = true;
 clearInterval(gameInterval);
 finalScoreElement.textContent = score;
 gameOverScreen.style.display = "flex";
 }

 function startGame() {
 isGameOver = false;
 score = 0;
 scoreElement.textContent = score;
 board = Array.from({ length: ROWS }, () => Array(COLUMNS).fill(0));
 startScreen.style.display = "none";
 gameOverScreen.style.display = "none";
 spawnTetromino();
 gameInterval = setInterval(() => {
 moveDown();
 draw();
 }, FRAME_RATE);
 }

 document.addEventListener("keydown", (event) => {
 if (!isGameOver) {
 if (event.key === "ArrowUp" || event.key === "w") {
 rotateTetromino();
 } else if (event.key === "ArrowLeft" || event.key === "a") {
 moveLeft();
 } else if (event.key === "ArrowRight" || event.key === "d") {
 moveRight();
 } else if (event.key === "ArrowDown" || event.key === "s") {
 moveDown();
 }
 draw();
 }
 });

 startButton.addEventListener("click", startGame);
 restartButton.addEventListener("click", startGame);
 </script>
</body>
</html>
